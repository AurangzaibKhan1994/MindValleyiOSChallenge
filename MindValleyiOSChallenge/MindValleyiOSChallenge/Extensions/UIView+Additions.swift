//
//  Extensions.swift
//  Golootlo
//
//  Created by Muhammad Usman Tarar on 5/18/17.
//  Copyright Â© 2017 GoLootlo. All rights reserved.
//

import UIKit

extension UIView {
    
    
    class func viewFromNibName(_ name:String, bundle: Bundle = Bundle.main) -> UIView? {
        
        let views = bundle.loadNibNamed(name, owner: nil, options: nil)
        guard let view = views!.first as? UIView else {
            
            fatalError("Could not find view from nib name: " + name)
            
        }
        
        return view
    }
    
    func addGradientLayerWithColor(color: UIColor) {
        
        let gradient = CAGradientLayer()
        gradient.frame = self.bounds
        gradient.colors = [UIColor.clear.cgColor, color.cgColor]
        self.layer.insertSublayer(gradient, at: 0)
        
    }
    
    func removeGradientLayer() {
        
    }
    
    // MARK: - Easy Frames
    
    func setFrameWidth(_ width:CGFloat) {
        self.frame = CGRect(x: self.frame.origin.x, y: self.frame.origin.y, width: width, height: self.frame.size.height)
    }
    
    func setFrameHeight(_ height:CGFloat) {
        self.frame = CGRect(x: self.frame.origin.x, y: self.frame.origin.y, width: self.frame.size.width, height: height)
    }
    
    func setFrameX(_ x:CGFloat) {
        self.frame = CGRect(x: x, y: self.frame.origin.y, width: self.frame.size.width, height: self.frame.size.height)
    }
    
    func setFrameY(_ y:CGFloat) {
        self.frame = CGRect(x: self.frame.origin.x, y: y, width: self.frame.size.width, height: self.frame.size.height)
    }
    
    func frameWidth() -> CGFloat {
        return self.frame.size.width;
    }
    
    func frameHeight() -> CGFloat {
        return self.frame.size.height;
    }
    
    func frameX() -> CGFloat {
        return self.frame.origin.x;
    }
    
    func frameY() -> CGFloat {
        return self.frame.origin.y;
    }
    
    
    func setCornarRadius(_ cornarRadius:CGFloat, cornars:UIRectCorner, strokeColor:UIColor?) {
        
        let maskPath = UIBezierPath(roundedRect: self.bounds, byRoundingCorners: cornars, cornerRadii: CGSize(width: cornarRadius, height: cornarRadius))
        
        let maskLayer = CAShapeLayer()
        maskLayer.frame = self.bounds
        if (strokeColor != nil) { maskLayer.strokeColor = strokeColor?.cgColor}
        maskLayer.path = maskPath.cgPath
        
        // Set the newly created shape layer as the mask for the image view's layer
        layer.mask = maskLayer
        
    }
    
    func removeAllSubviews() {
        self.subviews.forEach{ $0.removeFromSuperview() }
    }
    
    
    /// When positive, the background of the layer will be drawn with rounded corners. Also effects the mask generated by the `masksToBounds' property. Defaults to zero. Animatable.
    @IBInspectable var cornerRadius: Double {
        get {
            return Double(self.layer.cornerRadius)
        }
        set {
            self.layer.cornerRadius = CGFloat(newValue)
        }
    }
    
    /// The width of the layer's border, inset from the layer bounds. The border is composited above the layer's content and sublayers and includes the effects of the `cornerRadius' property. Defaults to zero. Animatable.
    @IBInspectable var borderWidth: Double {
        get {
            return Double(self.layer.borderWidth)
        }
        set {
            self.layer.borderWidth = CGFloat(newValue)
        }
    }
    
    /// The color of the layer's border. Defaults to opaque black. Colors created from tiled patterns are supported. Animatable.
    @IBInspectable var borderColor: UIColor? {
        get {
            return UIColor(cgColor: self.layer.borderColor!)
        }
        set {
            self.layer.borderColor = newValue?.cgColor
        }
    }
    
    /// The color of the shadow. Defaults to opaque black. Colors created from patterns are currently NOT supported. Animatable.
    @IBInspectable var shadowColor: UIColor? {
        get {
            return UIColor(cgColor: self.layer.shadowColor!)
        }
        set {
            self.layer.shadowColor = newValue?.cgColor
        }
    }
    
    /// The opacity of the shadow. Defaults to 0. Specifying a value outside the [0,1] range will give undefined results. Animatable.
    @IBInspectable var shadowOpacity: Float {
        get {
            return self.layer.shadowOpacity
        }
        set {
            self.layer.shadowOpacity = newValue
        }
    }
    
    /// The shadow offset. Defaults to (0, -3). Animatable.
    @IBInspectable var shadowOffset: CGSize {
        get {
            return self.layer.shadowOffset
        }
        set {
            self.layer.shadowOffset = newValue
        }
    }
    
    /// The blur radius used to create the shadow. Defaults to 3. Animatable.
    @IBInspectable var shadowRadius: Double {
        get {
            return Double(self.layer.shadowRadius)
        }
        set {
            self.layer.shadowRadius = CGFloat(newValue)
        }
    }
    
    func hideAndFade(In duration:Double) {
        
        self.alpha = 1.0
        
        // fade in
        UIView.animate(withDuration: duration, animations: {
            self.alpha = 0.0
        })
    }
}

